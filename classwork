25/02/2025
1.DISPLAYING THE LOWER MATRIX

import java.util.*;//import java.util.*;
public class Main{
        public static boolean lowermatrix(int a[][],int s){
            boolean yes=true;
            for(int i=0;i<s;i++)
            {
                for(int j=i+1;j<s;j++)
                {
                    if(a[i][j]!=0)
                    yes=false;
                    break;
                }
               
            }
            return yes;
        }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
    int size=sc.nextInt();
    int size1=sc.nextInt();
    int arr[][]=new int[size][size1];
    for(int i=0;i<size;i++){
        for(int i1=0;i1<size;i1++)
        arr[i][i1]=sc.nextInt();
    }
   if(lowermatrix(arr,size))
   System.out.println("Lowermatrix");
   else
   System.out.println("Not a Lowermatrix");
    }
}

*********************------------------**************************

2.UPPER MATRIX

import java.util.*;//import java.util.*;
public class Main{
        public static boolean lowermatrix(int a[][],int s){
            boolean yes=true;
            for(int i=0;i<s;i++)
            {
                for(int j=1;j<i;j++)
                {
                    if(a[i][j]!=0)
                    yes=false;
                    break;
                }
               
            }
            return yes;
        }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
    int size=sc.nextInt();
    int size1=sc.nextInt();
    int arr[][]=new int[size][size1];
    for(int i=0;i<size;i++){
        for(int i1=0;i1<size;i1++)
        arr[i][i1]=sc.nextInt();
    }
   if(lowermatrix(arr,size))
   System.out.println("Uppermatrix");
   else
   System.out.println("Not a Uppermatrix");
    }
}

*********************------------------**************************

3.SYMMENTRY MATRIX

import java.util.*;//import java.util.*;
public class Main{
        public static boolean lowermatrix(int a[][],int s){
            boolean yes=true;
            for(int i=0;i<s;i++)
            {
                for(int j=0;j<s;j++)
                {
                    if(a[i][j]!=a[j][i])
                    yes=false;
                    break;
                }
               
            }
            return yes;
        }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
    int size=sc.nextInt();
    int size1=sc.nextInt();
    int arr[][]=new int[size][size1];
    for(int i=0;i<size;i++){
        for(int i1=0;i1<size;i1++)
        arr[i][i1]=sc.nextInt();
    }
   if(lowermatrix(arr,size))
   System.out.println("SYMMENTRY");
   else
   System.out.println("Not a SYMMENTRY");
    }
}
*********************------------------**************************
*********************------------------**************************
*********************------------------**************************
___________________________________________________________________________________________________________________________

27/02/2025

1.CONSTRUCTER
import java.util.*;
class Main{
    public static void main(String[] args){
      ADD sc=new ADD(10);
      ADD sc1=new ADD();
    }
  }
class ADD { 
  ADD()
  {
    System.out.println(30);
  }
  ADD(int a)
  {
    System.out.println(a+30);
  }
}

*********************------------------**************************

2.ARRAYLIST USING OOPS

import java.util.*;
class Main {
    public static void main(String[]args){
        List<Player> A =new ArrayList<>();
        Player p1=new Player();
        p1.name="Karthikeyan";
        p1.country="india";
        p1.skill="football";
        A.add(p1);
        Player p2=new Player();
        p2.name="Arun";
        p2.country="india";
        p2.skill="cricket";
        A.add(p2);
        for(Player p : A){
            System.out.println(p.name+"-->"+p.country+"-->"+p.skill);
        }
    }
}
class Player{
   public String name;
   public String country;
   public String skill;
}

*********************------------------**************************

3.ENCAPSULATION

import java.util.*;
class Main{
    public static void main(String[] args){
      ADD sc=new ADD();
      sc.set(100);
      System.out.println(sc.get());
    }
  }
class ADD {
  private int x;
  public void set(int a){
    x=a;
  }
  public int get()
  {
    return x;
  }
}

*********************------------------**************************

3.AREA OF RECTANGLE USING PRIVATE CLASS


import java.util.*;
class Main{
    public static void main(String[] args){
      
      Scanner sc1=new Scanner(System.in);
      double height=sc1.nextDouble();
      double lenght=sc1.nextDouble();
      WALL sc=new WALL(lenght,height);
      System.out.println(sc.calculatearea());
    }
  }
class WALL {
  private double l,b;
  WALL(double le,double be)
  {
    l=le;
    b=be;
  }
  public double calculatearea()
  {
    return l*b;
  }
}

 *********************------------------**************************
 *********************------------------**************************
 *********************------------------**************************

___________________________________________________________________________________________________________________________

01/03/2025

INHERITANCE

******************//Class  Student(//parent class){
int mark=90;
String Name="Sathish";
}
class College extends Students(//child class){
String dept="EEE";
}
class Main{
p s v m();
college s1=new college();
s.o.p(s1.name);
OUTPUT:
Sathish
////////////////******************************

1.INHERITANCE
import java.util.*;
public class Main{
  public static void main(String[] args){
  college s1= new college();
  System.out.println(s1.name);
  s1.name="ram";
  System.out.println(s1.name);
  }
}
  class student{
    int mark=90;
    String name="Sathish";
  }
  class college extends student{
    String dept="EEE";
  }

 *********************------------------**************************

2.MULTI LEVEL INHERITANCE
import java.util.*;
public class Main{
  public static void main(String[] args){
  placement s1= new placement();
  System.out.println(s1.name);
  System.out.println(s1.mark);
  s1.name="ram";
  System.out.println(s1.name);
  System.out.println(s1.dept);
  System.out.println(s1.cgpa);
  }
}
  class student{
    int mark=90;
    String name="Sathish";
  }
  class college extends student{
    String dept="EEE";
  }
  class placement extends college{
    double cgpa=8.21;
  }

 *********************------------------**************************

3.FUNCTION OVER LOADING 
import java.util.*;
public class Main{
  public static void main(String[] args){
    EEE sc=new EEE();
    Scanner obj=new Scanner(System.in);
    double a=obj.nextDouble();
    double b=obj.nextDouble();
    sc.add(a,b);
  }
}
  class EEE{
    public void add(int x,int y){
      System.out.println(x+y);
    }
      public void add(double x, double y){
        System.out.println(x+y);
      }
    }

  *********************------------------**************************

4.FUNCTION OVER LOADING WITH 3 CLASS
import java.util.*;
public class Main{
 public static void main(String[] args){
   three obj=new three();
   obj.display();
 }
  }

  class one{
    public void display(){
      System.out.println("class one");
    }
  }
    class two extends one{
      public void display(){
        System.out.println("class two");
      }
    }
    class three extends two{
      public void display(){
        System.out.println("class three");
    }
    }

 *********************------------------**************************
 5.SAME FUNCTION NAME WITH DIFFERENT PARAMETER

import java.util.*;
public class Main{
  public static void main(String[] args){
    EEE sc=new EEE();
    Scanner obj=new Scanner(System.in);
    int n=obj.nextInt();
    if(n==2){
       int a=obj.nextInt();
       int b=obj.nextInt();
    sc.add(a,b);
    }
    else if(n==3){
      int a=obj.nextInt();
      int b=obj.nextInt();
      int c=obj.nextInt();
      
    sc.mul(a,b,c);
    }
    else
    System.out.println("invalid input");
  }
}
  class EEE{
    public void add(int x,int y){
      System.out.println(x+y);
    }
      public void mul(int x,int y,int z){
        System.out.println(x*y*z);
      }
    }
    
 *********************------------------**************************
 *********************------------------**************************
 *********************------------------**************************

___________________________________________________________________________________________________________________________

04/03/2025

1.ABSTARCTION

import java.util.*;
public class Main{
  public static void main(String[] args){
    vehicle ob=new bike();
    ob.start();
  }
}
interface vehicle{
  void start();
}
class bike implements vehicle{
  public void start(){
    System.out.println("bike started");
  }
}

 *********************------------------**************************

2.ABSTRACTION
import java.util.*;
public class Main{
  public static void main(String[] args){
    shape ob=new rect(2.5,3.5);
    System.out.println(ob.area());
  }
}
abstract class shape{
  double dime1,dime2;
  shape (double d1,double d2){
    dime1=d1;
    dime2=d2;
  }
  abstract double area();
}
class rect extends shape{
  rect(double l,double b){
    super(l,b);
  }
  double area(){
    return dime1*dime2;
  }
}

*********************------------------**************************

3.EXCEPTION

import java.util.*;
public class Main {
    public static void main(String[] args){
      int arr[]={10,5};
      try {
        System.out.println(arr[5]);
      } catch(Exception e) {
        System.out.println(e.getMessage());
      }
      System.out.println(arr[0]);
    }
}

*********************------------------**************************

4.THROW,THROWS METHOD

import java.util.*;
public class Main{
  public static void main(String[] args){
    try{
      print(55);
      print(35);
    }
    catch (Exception e){
      System.out.println(e.getMessage());
    }
  
}
 
  public static void print(int mark)throws MyExcep{
    if(mark<45){
    throw new MyExcep("Arivu Illaya Fail aagiruka");
    }
    else
    System.out.println("Passed");
  }

}
 public class MyExcep extends Exception{
    MyExcep(String msg){
      super(msg);
    
    }
 }

*********************------------------**************************
*********************------------------**************************
*********************------------------**************************

___________________________________________________________________________________________________________________________


